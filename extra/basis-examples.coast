a is function[int int int] = fn x y {
    x + y
};
adder is function[int int] = fn x {
    x + x;
};
l is function[int unit] = fn x {
    print "x is: " x;
};
ll = fn idx value {
    print "x at offset " idx " is " value;
}
# this is an interesting one; in Python,
# char is basically a type alias for strings,
# but in all other languages we support, it will
# be a completely different type. Unifying those
# two will be interesting...
s is function[char unit] = fn x {
    print "x is: " x;
};
b is int = 10;
g = array-make 10 0;
h = array-init 10 adder;
m = array-make-matrix 5 6 0;
f = array-map adder h;
j = array-map-index a h;
# so techincally we can put an `fn` here
# but the current python transpiler doesn't handling
# lifting/closure conversion yet, so I'm being explicit with
# manual lifting myself
array-iter l f;
array-iter-index ll f;
string-iter s "hello, world";
