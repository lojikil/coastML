# the first coastline file
# these define the type signatures of whatever
# is declared herein; like an `mli` file for OCaml

array-length is function[array[A] int];
array-get is  function[array[A] int A];
array-set! is function[array[A] int unit];
array-make is function[A int array[A]];
array-init is function[A int array[A]];
array-make-matrix is function[A int int array[array[A]]];
array-append is function[array[A] array[A] array[A]];
array-append! is function[array[A] array[A] unit];
array-compare is function[array[A] array[A] int];
array-concat is function[array[array[A]] array[A]];
array-concat!
array-sub
array-copy
array-fill!
array-blit!
array->list
list->array
array-iter
array-iter-while
array-map
array-iter-index
array-map-index
array-iter-until
array-foldl
array-foldr
array-sort
array-sort!
array-stable-sort
array-fast-sort
string-length
string-get
string-make
string-init
string-split
string-append
string-join
string-compare
string-contains
string-concat
string-copy
string->array
string-iter
string-map
string-iter-index
string-iter-while
string-map-index
string-foldl
string-foldr
string-iter-until
string-sort
compare
char-code
char-chr
char-escaped
char-lowercase
char-uppercase
char-compare
# File should have a `TextFile` and a `BinaryFile`
# constructor
# XXX should all of these return Result types?
# that would allow us to avoid Exceptions like
# what OCaml uses...
# XXX also, should we have low-level interfaces
# that just interact with e.g. POSIX and then
# the higher level interfaces that do the right
# thing?
open-in is [string File]
open-in-binary is [string File]
open-out is [string File]
open-out-binary is [string File]
with-open-file is [string function[File A]]
read-binary is [File array[int]]
read-line is [File string]
read-lines is [File array[string]]
read-file is [string string]
write-binary is [array[int] Result[int int]]
write-line is [File string Result[int int]]
write-lines
write-file
close-in
close-out
